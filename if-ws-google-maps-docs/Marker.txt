% Marker

The `Marker` class offers a way to point coordinates in the map.  It
allows you to configure the style and provides a set of events that
make it easy to add common behaviors like drag and drop.

### Setting Random Markers

This simple application sets the markers at random locations and
introduces the `Marker` object.  You will need the `Sample` function
defined above.

    [<JavaScript>]
    let RandomMarkers() =
        Sample <| fun map ->
            let addMarkers (_:obj) =
                // bounds is only available in the "bounds_changed" event.
                let bounds = map.GetBounds()
                let sw = bounds.GetSouthWest()
                let ne = bounds.GetNorthEast()
                let lngSpan = ne.Lng() - sw.Lng()
                let latSpan = ne.Lat() - sw.Lat()
                let rnd = JMath.Random
                for i in 1 .. 10 do
                    let point = new LatLng(sw.Lat() + (latSpan * rnd()),
                                           sw.Lng() + (lngSpan * rnd()))
                    let markerOptions = new MarkerOptions(point)
                    markerOptions.Map <- map
                    new Marker(markerOptions) |> ignore

            Event.AddListener(map, "bounds_changed", addMarkers) |> ignore


The first thing you do is creating a new function on which the markers are going to be placed in the map.
This is necessary since the bounds property (necessary for calculating the random positions) will be only
available after the "bounds_changed" event. Using `GetBounds` you can get coordinates of each of the
corners of the map.  This allows you to calculate the latitude and longitude spans on which the map is
currently set.

Using the south west coordinate (the lowest coordinate) you then proceed to create 10 coordinates by adding a random number based on
the spans.

Creating the `Marker` is just a matter of passing a `MarkerOptions` object with the coordinate to
the `Marker` constructor.

### Changing the Icon Appearance

You can change the `Marker` appearance by changing the options of the `MarkerOptions` object.

There is a bunch of properties to play with in the `MarkerOptions` class.  Is
possible to change completely the appearance of the `MarkerOptions` by setting
different images. The next example simulates a simple map that "displays
the weather."

    [<JavaScript>]
    let Weather() =
        Sample <| fun map ->
            let images = [| "sun"; "rain"; "snow"; "storm" |]
            let getWeatherIcon () =
                let i = int <| JMath.Floor(float images.Length * JMath.Random())
                let icon = new MarkerImage("http://gmaps-utility-library.googlecode.com/svn/trunk/markermanager/release/examples/images/"
                                            + images.[i] + ".png")
                icon

            let addMarkers (_:obj) =
                let bounds = map.GetBounds()
                let sw = bounds.GetSouthWest()
                let ne = bounds.GetNorthEast()
                let lngSpan = ne.Lng() - sw.Lng()
                let latSpan = ne.Lat() - sw.Lat()
                let rnd = JMath.Random
                for i in 1..10 do
                    let point = new LatLng(sw.Lat() + (latSpan * rnd()),
                                           sw.Lng() + (lngSpan * rnd()))
                    let markerOptions = new MarkerOptions(point)
                    markerOptions.Icon <- getWeatherIcon()
                    markerOptions.Map <- map
                    new Marker(markerOptions) |> ignore

            Event.AddListener(map, "bounds_changed", addMarkers) |> ignore


You start with a simple function that creates random weather icons. It
uses some images from the Google Maps utility library. Then it takes these images
and set them as the "Icon" property in the `MarkerOptions` object. Is necessary to set the
Map property to the map on which you want to display the marker. Then, just call the Map
constructor with the already built `MarkerOptions` instance.
